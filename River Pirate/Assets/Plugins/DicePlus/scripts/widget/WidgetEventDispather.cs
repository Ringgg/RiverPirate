using UnityEngine;
using System.Collections.Generic;
/// <summary>
/// Dispathes events generated by widget, lets you register event listeners
/// </summary>
public class WidgetEventDispather : MonoBehaviour {
	
	private static WidgetEventDispather instance;
	public static WidgetEventDispather Instance {
		get {
			return instance;
		}
	}
	
	void Awake () {
		if (instance == null) {
			instance = this;
		} else {
			Destroy(gameObject);
		}
	}
	
	void OnDestroy() {
		if (this == instance) {
			instance = null;
		}
	}
	
	private HashSet<WidgetEventListener> listeners = new HashSet<WidgetEventListener>();
	
	/// <summary>
	/// Registers listener.
	/// </summary>
	/// <param name='listener'>
	/// listener
	/// </param>
	public void registerListener(WidgetEventListener listener) {
		HashSet<WidgetEventListener> tmplisteners = new HashSet<WidgetEventListener>(listeners);
		tmplisteners.Add(listener);
		listeners = tmplisteners;	
	}
	/// <summary>
	/// Unregisters listener.
	/// </summary>
	/// <param name='listener'>
	/// listener
	/// </param>
	public void unregisterListener(WidgetEventListener listener) {
		HashSet<WidgetEventListener> tmplisteners = new HashSet<WidgetEventListener>(listeners);
		tmplisteners.Remove(listener);
		listeners = tmplisteners;
	}
	
	public void notifyInfoWindowStateChange(bool enabledState) {
		foreach (WidgetEventListener listener in listeners) {
			listener.onInfoWindowStateChange(enabledState);
		}
 	}
	
	public void notifyWidgetDraggingStart( ) {
		foreach (WidgetEventListener listener in listeners) {
			listener.onWidgetDraggingStart();
		}
 	}
	
	public void notifyWidgetDraggingEnd( ) {
		foreach (WidgetEventListener listener in listeners) {
			listener.onWidgetDraggingEnd();
		}
 	}
	
	public void notifyWidgetStateChange(bool hidden) {
		foreach (WidgetEventListener listener in listeners) {
			listener.onWidgetStateChange(hidden);
		}
 	}
	
	public void notifyRollerEnabled(bool isEnabled) {
		foreach (WidgetEventListener listener in listeners) {
			listener.onRollerStateChange(isEnabled);
		}
	}
}
